modules:
  rssReader: # Step 1 - Implemented in rssReader.js
    location: src/backend/modules/articles/rssReader.js
    event_order:  # Implemented as specified
      - pull_rss_feed  # Using rss-parser library
      - parse_rss_feed:
        - channels:  # Implemented with source tracking
          - url
          - title
        - articles:  # Implemented with additional fields
          - url
          - title
          - pubDate
          - content:encoded:  # RSS feed content handling
            - CDATA HTML content
            - images
            - embedded media
      - store_feeds  # Implemented with PostgreSQL
      - create_articles_table  # Dynamic table creation per source
    triggers:
      - articles_fetch:  # Triggers articlesFetch module
        with:
          - articles_table:  # Passes table info
            - url
            - title
            - pubDate
  articlesFetch: # Step 2 - Implemented in articlesFetch.js
    location: src/backend/modules/articles/articlesFetch.js
    implementation:
      features:  # All implemented as specified
        - Source-specific table handling
        - Bulk article processing
        - Transaction per source
        - Error handling per source
      database:
        operations:  # Implemented with pg pool
          - UPSERT articles using url as key
          - Transaction management
          - Connection pooling
    tasks:  # Implemented as specified
      - pull articles from Sources
      - store articles:
        - url
        - title
        - date_added
      - check if article scrape needed:
        - if content:encoded exists in RSS:
          - extract and store content
          - skip scraping step
        - else:
          - queue for scraping
    triggers:
      - scrape_articles:  # Triggers articlesScrape module
        with:
          - articles_table:
            - url
            - row_id
  articlesScrape: # Step 3 - Implemented in articlesScrape.js
    location: src/backend/modules/articles/articlesScrape.js
    scrapers:
      trueNorth:  # Implemented in trueNorth.js
        features:
          - Video/Podcast detection  # Partially implemented
          - Content:encoded extraction
          - Raw content fallback
      cbc:  # Implemented in cbc.js
        features:
          - Custom user agent
          - URL cleaning
          - Main content extraction:
            - main tag parsing
            - detailContent div parsing
            - story-content fallback
    tasks:
      - check scrape_check flag
      - scrape articles only if content is NULL
      - store content in articles_table
    content_processing:
      ollama:
        endpoint: /api/chat
    retention:  # Not yet implemented
      articles_days: 30
      events_days: 90

utils:
  logger:  # Implemented in logger.js
    location: src/backend/utils/logger.js
    implementation: winston
    features:
      - Timestamp
      - Log levels:
          error: "Critical failures and exceptions"
          warn: "Non-critical issues needing attention"
          info: "High-level process starts/completions"
          debug: "Detailed progress tracking"
      - Module-specific loggers
  
  database:  # Implemented in dbCon.js
    location: src/backend/utils/dbCon.js
    implementation: pg
    features:
      - Connection pooling
      - Transaction support
      - Parameterized queries
  
  ollama:  # Implemented in ollama.js
    location: src/backend/utils/ollama.js
    implementation: direct-api
    features:
      - Chat API integration
      - Error handling with fallback
      - Request/Response logging
    endpoints:
      chat:
        method: POST
        path: /api/chat
        request:
          - model
          - messages
          - options
        response:
          - message.content