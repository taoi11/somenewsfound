modules:
  rssReader: # Step 1
    location: src/backend/modules/articles/rssReader.js
    event_order:
      - pull_rss_feed
      - parse_rss_feed:
        - channels:
          - url
          - title
        - articles:
          - url
          - title
          - pubDate
          - content:encoded: # RSS feed may contain full article content
            - CDATA HTML content
            - images
            - embedded media
      - store_feeds
      - create_articles_table
    triggers:
      - articles_fetch: 
        with:
          - articles_table:
            - url
            - title
            - pubDate
  articlesFetch: # Step 2
    location: src/backend/modules/articles/articlesFetch.js
    implementation:
      features:
        - Source-specific table handling
        - Bulk article processing
        - Transaction per source
        - Error handling per source
      database:
        operations:
          - UPSERT articles using url as key
          - Transaction management
          - Connection pooling
    tasks:
      - pull articles from Sources
      - store articles:
        - url
        - title
        - date_added
      - check if article scrape needed:
        - if content:encoded exists in RSS:
          - extract and store content
          - skip scraping step
        - else:
          - queue for scraping
    triggers:
      - scrape_articles:
        with:
          - articles_table:
            - url
            - row_id
  articles_scrape: # Step 3
    tasks:
      - check scrape_check flag
      - scrape articles only if scrape_check = 0
      - store content in articles_table
    content_processing:
      ollama:
        endpoint: /api/chat
        model: reader-lm:1.5b-fp16
        context_size: 65536
        fallback: "Store original HTML if conversion fails"
    retention:
      articles_days: 30
      events_days: 90
    optimization:
      skip_conditions:
        - content:encoded present in RSS feed
        - content already extracted during articlesFetch

utils:
  logger:
    location: src/backend/utils/logger.js
    implementation: winston
    features:
      - Timestamp
      - Log levels
      - Module-specific loggers
  
  database:
    location: src/backend/utils/dbCon.js
    implementation: pg
    features:
      - Connection pooling
      - Transaction support
      - Parameterized queries
  
  ollama:
    location: src/backend/utils/ollama.js
    implementation: direct-api
    features:
      - Chat API integration
      - Error handling with fallback
      - Request/Response logging
    endpoints:
      chat:
        method: POST
        path: /api/chat
        request:
          - model
          - messages
          - options
        response:
          - message.content